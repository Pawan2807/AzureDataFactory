{
	"name": "ordersTransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sink_orders_item",
						"type": "DatasetReference"
					},
					"name": "ordersItemSink"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_orders",
						"type": "DatasetReference"
					},
					"name": "ordersSink"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "low_value_orders",
						"type": "DatasetReference"
					},
					"name": "lowValueOrders"
				},
				{
					"dataset": {
						"referenceName": "errorneous_order",
						"type": "DatasetReference"
					},
					"name": "errorneousOrders"
				},
				{
					"dataset": {
						"referenceName": "high_value_orders_sink",
						"type": "DatasetReference"
					},
					"name": "highValueOrders"
				}
			],
			"transformations": [
				{
					"name": "orderAmountCalculation"
				},
				{
					"name": "split1"
				},
				{
					"name": "joinedTable"
				},
				{
					"name": "projectColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          order_item_id as string,",
				"          order_item_order_id as string,",
				"          order_item_product_id as string,",
				"          order_item_quantity as string,",
				"          order_item_subtotal as double,",
				"          order_item_product_price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> ordersItemSink",
				"source(output(",
				"          order_id as string,",
				"          order_date as string,",
				"          order_customer_id as string,",
				"          order_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> ordersSink",
				"ordersItemSink aggregate(groupBy(order_item_order_id),",
				"     order_item_subtotal = sum(order_item_subtotal)) ~> orderAmountCalculation",
				"projectColumns split(greater(order_amount,500.00),",
				"     lesserOrEqual(order_amount,500.00),",
				"     disjoint: true) ~> split1@(highValueOrders, lowValueOrders, errorneousOrders)",
				"orderAmountCalculation, ordersSink join(order_item_order_id == order_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinedTable",
				"joinedTable select(mapColumn(",
				"          order_id = order_item_order_id,",
				"          order_customer_id,",
				"          order_amount = order_item_subtotal,",
				"          order_date,",
				"          order_status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> projectColumns",
				"split1@lowValueOrders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          order_id as string,",
				"          order_customer_id as string,",
				"          order_amount as string,",
				"          order_date as string,",
				"          order_status as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> lowValueOrders",
				"split1@errorneousOrders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> errorneousOrders",
				"split1@highValueOrders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          order_id as string,",
				"          order_customer_id as string,",
				"          order_amount as string,",
				"          order_date as string,",
				"          order_status as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     format: 'table') ~> highValueOrders"
			]
		}
	}
}